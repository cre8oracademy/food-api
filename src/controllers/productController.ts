/**
 * food apiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import {
  ActivateSwitchRequest,
  activateSwitchRequestSchema,
} from '../models/activateSwitchRequest';
import {
  CustomOrderSwitchRequest,
  customOrderSwitchRequestSchema,
} from '../models/customOrderSwitchRequest';
import {
  ProductUpdateRequest,
  productUpdateRequestSchema,
} from '../models/productUpdateRequest';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ProductController extends BaseController {
  /**
   * update_ingredients
   *
   * @param productId
   * @param ingredients
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async updateIngredients(
    productId: number,
    ingredients: string,
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/product/update_ingredients');
    const mapped = req.prepareArgs({
      productId: [productId, number()],
      ingredients: [ingredients, string()],
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.form({
      product_id: mapped.productId,
      ingredients: mapped.ingredients,
    });
    return req.call(requestOptions);
  }

  /**
   * get a product only if its active to activate use activate handler
   *
   * @return Response from the API call
   */
  async getaproduct(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'GET',
      '/product/9307a747-69ca-439d-8d27-5bc646b370f4'
    );
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * activate_switch
   *
   * @param body
   * @return Response from the API call
   */
  async activateSwitch(
    body: ActivateSwitchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT', '/product/activate_switch');
    const mapped = req.prepareArgs({
      body: [body, activateSwitchRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * delete
   *
   * @param productId  takes product id product must be yours and id exixts
   * @return Response from the API call
   */
  async delete(
    productId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/product/delete/2');
    const mapped = req.prepareArgs({ productId: [productId, number()] });
    req.form({
      product_id: mapped.productId,
    });
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * create product
   *
   * @param name
   * @param discription
   * @param price
   * @param category
   * @param image1
   * @param ingredients It is an array you an add and update and ingredient on index
   * @param alergicTo   Which things in an array
   * @param image2
   * @param image3
   * @param image4
   * @param image5
   * @return Response from the API call
   */
  async createproduct(
    name: string,
    discription: string,
    price: number,
    category: string,
    image1: FileWrapper,
    ingredients: string[],
    alergicTo: string[],
    image2?: FileWrapper,
    image3?: FileWrapper,
    image4?: FileWrapper,
    image5?: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/product/create');
    const mapped = req.prepareArgs({
      name: [name, string()],
      discription: [discription, string()],
      price: [price, number()],
      category: [category, string()],
      ingredients: [ingredients, array(string())],
      alergicTo: [alergicTo, array(string())],
    });
    req.formData({
      name: mapped.name,
      discription: mapped.discription,
      price: mapped.price,
      category: mapped.category,
      image1: image1,
      ingredients: mapped.ingredients,
      alergic_to: mapped.alergicTo,
      image2: image2,
      image3: image3,
      image4: image4,
      image5: image5,
    });
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * custum_order
   *
   * @param body
   * @return Response from the API call
   */
  async custumOrder(
    body: CustomOrderSwitchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT', '/product/custum_order_switch');
    const mapped = req.prepareArgs({
      body: [body, customOrderSwitchRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * update product
   *
   * @param body
   * @return Response from the API call
   */
  async update(
    body: ProductUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT', '/product/update');
    const mapped = req.prepareArgs({
      body: [body, productUpdateRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }
}
