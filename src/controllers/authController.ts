/**
 * food apiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { Loginrequest, loginrequestSchema } from '../models/loginrequest';
import {
  Resetpasswordrequest,
  resetpasswordrequestSchema,
} from '../models/resetpasswordrequest';
import {
  Updateprofilerequest,
  updateprofilerequestSchema,
} from '../models/updateprofilerequest';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AuthController extends BaseController {
  /**
   * User must be loged in to send this request
   *
   * @return Response from the API call
   */
  async logout(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/auth/logout');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * to resend the email need token
   *
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async resendemail(
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/auth/email/resend');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * this is sample url send to the email
   *
   * http://127.0.0.1:8000/api/auth/password/reset?
   * token=5db4496573f11cbbeab6bd7db77d4f2ae7081cf2c09f3de297889a92bd25b499&email=saifullahsaeed05%40gmai
   * l.com
   *
   * @param email         if account exists
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async forgotPassword(
    email: string,
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('POST', '/auth/forgot_password');
    const mapped = req.prepareArgs({
      email: [email, string()],
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.form({
      email: mapped.email,
    });
    req.authenticate(false);
    return req.callAsText(requestOptions);
  }

  /**
   * Use your username and password to login
   *
   * @param body
   * @return Response from the API call
   */
  async login(
    body: Loginrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/auth/login');
    const mapped = req.prepareArgs({ body: [body, loginrequestSchema] });
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * reset password
   *
   * we get token I email and email also toke and email is cross verified so don't worry if token or or
   * mail changed it will give you an error
   *
   * @param body
   * @return Response from the API call
   */
  async resetpassword(
    body: Resetpasswordrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/auth/password/reset');
    const mapped = req.prepareArgs({
      body: [body, resetpasswordrequestSchema],
    });
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Takes
   *
   * name
   *
   * username unique
   *
   * email  unique
   *
   * password   at least 6 chracter
   *
   * c_password
   *
   *
   *
   * @param body Takes JSON data
   * @return Response from the API call
   */
  async updateprofile(
    body: Updateprofilerequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT', '/auth/profile_update');
    const mapped = req.prepareArgs({
      body: [body, updateprofilerequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This link you will find in the inbox of you email inbox which provided during registration
   *
   * @param token
   * @return Response from the API call
   */
  async emailvarify(
    token: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ token: [token, string()] });
    req.appendTemplatePath`/auth/email/verify/${mapped.token}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Takes
   *
   * name
   *
   * username unique
   *
   * email  unique
   *
   * password   at least 6 chracter
   *
   * c_password
   *
   *
   *
   * @param name
   * @param username   Unique
   * @param email      Unique
   * @param password   at least 6 chracters
   * @param cPassword  same as password
   * @return Response from the API call
   */
  async register(
    name: string,
    username: string,
    email: string,
    password: string,
    cPassword: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/auth/register');
    const mapped = req.prepareArgs({
      name: [name, string()],
      username: [username, string()],
      email: [email, string()],
      password: [password, string()],
      cPassword: [cPassword, string()],
    });
    req.form({
      name: mapped.name,
      username: mapped.username,
      email: mapped.email,
      password: mapped.password,
      c_password: mapped.cPassword,
    });
    req.throwOn(400, ApiError, '"error": {         "name": [             "The name field is required."         ],         "username": [             "The username field is required."         ],         "password": [             "The password field is required."         ],         "c_password": [             "The c password field is required."         ],         "email": [             "The email field is required."         ]     } }');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * profile
   *
   * @return Response from the API call
   */
  async profile(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/auth/profile');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * profile_pic_upload
   *
   * @param image image file
   * @return Response from the API call
   */
  async profilePicUpload(
    image: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/profile_pic_upload');
    req.formData({
      image: image,
    });
    return req.call(requestOptions);
  }
}
