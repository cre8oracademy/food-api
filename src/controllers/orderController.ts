/**
 * food apiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { OrderDetails, orderDetailsSchema } from '../models/orderDetails';
import {
  PlaceOrderRequest,
  placeOrderRequestSchema,
} from '../models/placeOrderRequest';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class OrderController extends BaseController {
  /**
   * <h2>output is</h2><br> <br> <br>
   *
   * <code>
   * {<br>
   * "seccuss": true,<br>
   * "Order": [<br>
   * {<br>
   * "order_id": 2,<br>
   * "order_uid": "934a43b9-ff4e-4c68-860c-3d8f6430f861",<br>
   * "buyer_id": 1,<br>
   * "total_products": 8,<br>
   * "total_amount": 400,<br>
   * "active": 1,<br>
   * "canceled": 0,<br>
   * "completed": 0,<br>
   * "created_by": 1,<br>
   * "deleted_at": null,<br>
   * "m_delete": null,<br>
   * "created_at": "2021-04-26 21:15:31",<br>
   * "updated_at": "2021-04-26 21:15:31"<br>
   * }<br>
   * ],<br>
   * "Order Details": [<br>
   * {<br>
   * "order_detail_id": 2,<br>
   * "order_id": 2,<br>
   * "product_category_id": null,<br>
   * "product_category_item_id": null,<br>
   * "custom": "Not allowed by product owner",<br>
   * "item_price": 400,<br>
   * "item_quantity": 8,<br>
   * "created_by": 1,<br>
   * "m_delete": null,<br>
   * "created_at": "2021-04-26 21:15:31",<br>
   * "updated_at": "2021-04-26 21:15:31"<br>
   * }<br>
   * ],<br>
   * "Order Items": [<br>
   * {<br>
   * "id": 2,<br>
   * "order_id": 2,<br>
   * "product_id": 1,<br>
   * "amount": 7,<br>
   * "added_by": 1,<br>
   * "created_at": "2021-04-26 21:15:31",<br>
   * "updated_at": "2021-04-26 21:15:31"<br>
   * },<br>
   * {<br>
   * "id": 3,<br>
   * "order_id": 2,<br>
   * "product_id": 1,<br>
   * "amount": 1,<br>
   * "added_by": 1,<br>
   * "created_at": "2021-04-26 21:15:31",<br>
   * "updated_at": "2021-04-26 21:15:31"<br>
   * }<br>
   * ]<br>
   * }<br>
   * </code>
   *
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async orderDetails(
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrderDetails>> {
    const req = this.createRequest(
      'GET',
      '/order/order_details/934a43b9-ff4e-4c68-860c-3d8f6430f861'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    return req.callAsJson(orderDetailsSchema, requestOptions);
  }

  /**
   * cancel order
   *
   * @param orderUid  can get from order details
   * @return Response from the API call
   */
  async cancelorder(
    orderUid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/order/cancel');
    const mapped = req.prepareArgs({ orderUid: [orderUid, string()] });
    req.form({
      order_uid: mapped.orderUid,
    });
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * accept
   *
   * @param orderUid  can get from order details
   * @return Response from the API call
   */
  async accept(
    orderUid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/order/accept');
    const mapped = req.prepareArgs({ orderUid: [orderUid, string()] });
    req.form({
      order_uid: mapped.orderUid,
    });
    return req.call(requestOptions);
  }

  /**
   * In the product array  request will take multiple objects to make order of multiple items
   *
   * <style type="text/css">
   * .tg  {border-collapse:collapse;border-spacing:0;}
   * .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-
   * size:14px;
   * overflow:hidden;padding:10px 5px;word-break:normal;}
   * .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-
   * size:14px;
   * font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
   * .tg .tg-0lax{text-align:left;vertical-align:top}
   * </style>
   * <table class="tg">
   * <thead>
   * <tr>
   * <th class="tg-0lax">Response Code</th>
   * <th class="tg-0lax">Response</th>
   * </tr>
   * </thead>
   * <tbody>
   * <tr>
   * <td class="tg-0lax">200</td>
   * <td class="tg-0lax">{
   * "message": "Order Placed"
   * }</td>
   * </tr>
   * <tr>
   * <td class="tg-0lax">401</td>
   * <td class="tg-0lax">{
   * "error": "You are Unauthanticated"
   * }</td>
   * </tr>
   * <tr>
   * <td class="tg-0lax">500</td>
   * <td class="tg-0lax">{
   * "Error": "Internal Server Error"
   * }</td>
   * </tr>
   * </tbody>
   * </table>
   *
   * @param body
   * @return Response from the API call
   */
  async placeOrder(
    body: PlaceOrderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/order/place_order');
    const mapped = req.prepareArgs({ body: [body, placeOrderRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * All of you orders
   *
   * @return Response from the API call
   */
  async shopOrders(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/order/shoporders');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * The order which you placed to other stores
   *
   * @return Response from the API call
   */
  async placedOrder(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/order/placedorder');
    return req.callAsJson(unknown(), requestOptions);
  }
}
