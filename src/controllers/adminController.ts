/**
 * food apiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class AdminController extends BaseController {
  /**
   * reports
   *
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async reports(
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/admin/reports');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    return req.call(requestOptions);
  }

  /**
   * delete user
   *
   * @param userId
   * @return Response from the API call
   */
  async deleteuser(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/admin/delete_user/${mapped.userId}`;
    return req.callAsText(requestOptions);
  }

  /**
   * create catagory
   *
   * @param name
   * @param discription minimum 20 chars
   * @return Response from the API call
   */
  async createcatagory(
    name: string,
    discription: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/admin/create_catagory');
    const mapped = req.prepareArgs({
      name: [name, string()],
      discription: [discription, string()],
    });
    req.form({
      name: mapped.name,
      discription: mapped.discription,
    });
    return req.call(requestOptions);
  }

  /**
   * nummber of users
   *
   * @param authorization Example: Bearer {token}
   * @return Response from the API call
   */
  async nummberofusers(
    authorization?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/admin/total_users');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    return req.call(requestOptions);
  }

  /**
   * cancel_order
   *
   * @param orderUid
   * @return Response from the API call
   */
  async cancelOrder(
    orderUid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/');
    const mapped = req.prepareArgs({ orderUid: [orderUid, string()] });
    req.form({
      order_uid: mapped.orderUid,
    });
    return req.call(requestOptions);
  }
}
